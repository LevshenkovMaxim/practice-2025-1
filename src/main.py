from dotenv import load_dotenv
from pathlib import Path
from telebot import TeleBot, types
import os
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
dotenv_path = Path(__file__).parent / ".env"
load_dotenv(dotenv_path=dotenv_path)
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set. Check your .env file.")

bot = TeleBot(BOT_TOKEN)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.set_my_commands([
    types.BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
    types.BotCommand("hello", "–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º"),
    types.BotCommand("horoscope", "–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø"),
])

# –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞–∫–æ–≤
ZODIAC_SIGNS = {
    "–û–≤–µ–Ω": "Aries",
    "–¢–µ–ª–µ—Ü": "Taurus",
    "–ë–ª–∏–∑–Ω–µ—Ü—ã": "Gemini",
    "–†–∞–∫": "Cancer",
    "–õ–µ–≤": "Leo",
    "–î–µ–≤–∞": "Virgo",
    "–í–µ—Å—ã": "Libra",
    "–°–∫–æ—Ä–ø–∏–æ–Ω": "Scorpio",
    "–°—Ç—Ä–µ–ª–µ—Ü": "Sagittarius",
    "–ö–æ–∑–µ—Ä–æ–≥": "Capricorn",
    "–í–æ–¥–æ–ª–µ–π": "Aquarius",
    "–†—ã–±—ã": "Pisces",
}

DAYS = ["TODAY", "TOMORROW", "YESTERDAY"]

# –ö–æ–º–∞–Ω–¥–∞ /start –∏ /hello
@bot.message_handler(commands=['start', 'hello'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≥–æ—Ä–æ—Å–∫–æ–ø ‚ú®\n–ù–∞–ø–∏—à–∏ /horoscope —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.")

# –ö–æ–º–∞–Ω–¥–∞ /horoscope
@bot.message_handler(commands=['horoscope'])
def horoscope_handler(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for sign in ZODIAC_SIGNS.keys():
        markup.add(sign)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, ask_day)

def ask_day(message):
    user_sign = message.text
    if user_sign not in ZODIAC_SIGNS:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /horoscope")
        return
    sign_en = ZODIAC_SIGNS[user_sign]

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row("TODAY", "TOMORROW", "YESTERDAY")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=markup)
    bot.register_next_step_handler(message, fetch_horoscope, sign_en)

def fetch_horoscope(message, sign_en):
    day = message.text.upper()
    if day not in DAYS:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /horoscope")
        return

    horoscope = get_daily_horoscope(sign_en, day)

    if "error" in horoscope:
        bot.send_message(message.chat.id, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    data = horoscope["data"]
    text = f"üîÆ *–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign_en}*\nüìÖ *{data['date']}*\n\n_{data['horoscope_data']}_"
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
def get_daily_horoscope(sign: str, day: str) -> dict:
    url = "https://horoscope-app-api.vercel.app/api/v1/get-horoscope/daily"
    params = {"sign": sign, "day": day}
    try:
        response = requests.get(url, params=params, timeout=5)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        return {"error": str(e)}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@bot.message_handler(func=lambda msg: True)
def echo_all(message):
    bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /horoscope –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞.")

# –ó–∞–ø—É—Å–∫
bot.infinity_polling()